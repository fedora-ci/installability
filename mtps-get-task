#!/bin/bash -efu

shopt -s extglob

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See LICENSE for more details.
#
# Copyright: Red Hat Inc. 2018
# Author: Andrei Stepanov <astepano@redhat.com>

RET_NO_PKG=7

debug() {
    if [ -n "$DEBUG" ]; then
        echo "$*" >&2
    fi
}

rpms_from_answer() {
    local arch="$1" && shift
    local xml="$1" && shift
    local tmpfile="$(mktemp)"
    echo "$xml" > "$tmpfile"
    local cmd="cat //member[name='rpms']//value/string/text()" 
    local rpm="$(echo "$cmd" | xmllint --shell "$tmpfile" | sed -n -e '/^[[:alnum:]]/p' | sed -n -e "/\.$arch\.rpm/p")"
    debug "Arch $arch has next rpms:"
    debug "$rpm"
    debug "---"
    echo "$rpm"
}

srpms_from_answer() {
    local xml="$1" && shift
    local tmpfile="$(mktemp)"
    echo "$xml" > "$tmpfile"
    local cmd="cat //member[name='srpms']//value/string/text()" 
    local srpm="$(echo "$cmd" | xmllint --shell "$tmpfile" | sed -n -e '/^[[:alnum:]]/p' | sed -n -e "/\.rpm/p")"
    debug "Has next srpms:"
    debug "$srpm"
    debug "---"
    echo "$srpm"
}

is_scratch_from_answer() {
    local xml="$1" && shift
    local is_scratch=
    is_scratch="$(echo "$xml" | xmllint --xpath 'string(//member[name="scratch"]/value/boolean/text())' -)"
    [[ "$is_scratch" == '1' ]] && is_scratch="yes" || is_scratch="no"
    debug "Is scratch: $is_scratch"
    echo "$is_scratch"
}

volume_name_from_answer() {
    local xml="$1" && shift
    local volume_name=
    volume_name="$(echo "$xml" | xmllint --xpath 'string(//member[name="volume_name"]/value/string/text())' -)"
    debug "Volume name: $volume_name"
    echo "$volume_name"
}

build_source_from_answer() {
    local xml="$1" && shift
    local build_source=
    build_source="$(echo "$xml" | xmllint --xpath 'string(//member[name="source"]/value/string/text())' -)"
    debug "Build source: $build_source"
    echo "$build_source"
}

nvr_from_answer() {
    local xml="$1" && shift
    local nvr=
    nvr="$(echo "$xml" | xmllint --xpath 'string(//member[name="nvr"]/value/string/text())' -)"
    debug "NVR: $nvr"
    echo "$nvr"
}

buildid_from_answer() {
    local xml="$1" && shift
    local buildid=
    buildid="$(echo "$xml" | xmllint --xpath 'string(//member[name="build_id"]/value/int/text())' -)"
    debug "buildid: $buildid"
    echo "$buildid"
}

buildtags_from_answer() {
    local xml="$1" && shift
    local tmpfile="$(mktemp)"
    echo "$xml" > "$tmpfile"
    local cmd="cat //member[name='name']/value/string/text()"
    local tags="$(echo "$cmd" | xmllint --shell "$tmpfile" | sed -n -e '/^[[:alnum:]]/p')"
    debug "Build has next tags:"
    debug "$tags"
    debug "---"
    echo "$tags"
}

children_from_answer() {
    local xml="$1" && shift
    local tmpfile="$(mktemp)"
    echo "$xml" > "$tmpfile"
    local cmd="cat //member[name='id']/value/int/text()"
    local children="$(echo "$cmd" | xmllint --shell "$tmpfile" | sed -n -e '/^[[:alnum:]]/p')"
    debug "Task has next children:"
    debug "$children"
    debug "---"
    echo "$children"
}

send_query() {
    local query="$1" && shift
    local answer="$(curl --silent -k --data "$query" "$BREWHUB")"
    debug "Brew answer: ${answer:0:200}...(truncated)"
    echo "$answer"
}

# Use:
#
#     'koji list-api' to get a list of available XMLRPC.
#     'brew --debug-xmlrpc' to get XML
#

mk_query_build() {
    # getBuild query
    # Build can be: NVR or build number.
    local build="$1" && shift
    local query="$(cat << EOF
<?xml version="1.0" encoding="UTF-8"?>
<methodCall>
<methodName>getBuild</methodName>
<params>
<value>$build</value>
<param>
</param>
</params>
</methodCall>
EOF
    )"
    debug "Brew query for listBuildRPMs: ${query:0:200}...(truncated)"
    echo "$query"
}

mk_query_listbuildtags() {
    # listTags query
    # Build can be: build number.
    local build="$1" && shift
    local query="$(cat << EOF
<?xml version="1.0" encoding="UTF-8"?>
<methodCall>
<methodName>listTags</methodName>
<params>
<param>
<value><int>$build</int></value>
</param>
</params>
</methodCall>
EOF
    )"
    debug "Brew query for listTags: ${query:0:200}...(truncated)"
    echo "$query"
}


mk_query_listbuilds() {
    # listBuilds query
    local task="$1" && shift
    local query="$(cat << EOF
<?xml version='1.0'?>
<methodCall>
<methodName>listBuilds</methodName>
<params>
<param>
<value><struct>
<member>
<name>__starstar</name>
<value><boolean>1</boolean></value>
</member>
<member>
<name>taskID</name>
<value><int>$task</int></value>
</member>
</struct></value>
</param>
</params>
</methodCall>
EOF
    )"
    debug "Brew query for listBuilds: ${query:0:200}...(truncated)"
    echo "$query"
}

mk_query_task_result() {
    # getTaskResult query
    # Build can be: NVR or build number.
    local task="$1" && shift
    local query="$(cat << EOF
<?xml version='1.0'?>
<methodCall>
    <methodName>getTaskResult</methodName>
    <params>
        <param>
            <value><int>$task</int></value>
        </param>
    </params>
</methodCall>
EOF
    )"
    debug "Brew query for getTaskResult: ${query:0:200}...(truncated)"
    echo "$query"
}

mk_query_get_user() {
    # getUser query
    local user_id="$1" && shift
    local query="$(cat << EOF
<?xml version='1.0'?>
<methodCall>
<methodName>getUser</methodName>
<params>
<param>
<value><int>$user_id</int></value>
</param>
</params>
</methodCall>
EOF
    )"
    debug "Brew query for getUser: ${query:0:200}...(truncated)"
    echo "$query"
}

mk_query_task_info() {
    # getTaskInfo query
    local task="$1" && shift
    local query="$(cat << EOF
<?xml version='1.0'?>
<methodCall>
<methodName>getTaskInfo</methodName>
<params>
<param>
<value><int>$task</int></value>
</param>
</params>
</methodCall>
EOF
    )"
    debug "Brew query for getTaskInfo: ${query:0:200}...(truncated)"
    echo "$query"
}

mk_query_task_request() {
    # getTaskInfo query
    local task="$1" && shift
    local query="$(cat << EOF
<?xml version='1.0'?>
<methodCall>
<methodName>getTaskRequest</methodName>
<params>
<param>
<value><int>$task</int></value>
</param>
</params>
</methodCall>
EOF
    )"
    debug "Brew query for getTaskRequest: ${query:0:200}...(truncated)"
    echo "$query"
}

taskinfo2owner() {
    local xml="$1" && shift
    local tmpfile="$(mktemp)"
    echo "$xml" > "$tmpfile"
    local cmd="cat //member[name='owner']/value/int/text()"
    local owner="$(echo "$cmd" | xmllint --shell "$tmpfile" | sed -n -e '/^[[:alnum:]]/p')"
    debug "Task has owner id:"
    debug "$owner"
    debug "---"
    echo "$owner"
}

taskquery2target() {
    local xml="$1" && shift
    local tmpfile="$(mktemp)"
    echo "$xml" > "$tmpfile"
    local cmd="cat //params/param[1]/value/array/data[1]/value[2]/string/text()"
    local target="$(echo "$cmd" | xmllint --shell "$tmpfile" | sed -n -e '/^[[:alnum:]]/p')"
    debug "Task has target:"
    debug "$target"
    debug "---"
    echo "$target"
}

ownerinfo2user() {
    local xml="$1" && shift
    local tmpfile="$(mktemp)"
    echo "$xml" > "$tmpfile"
    local cmd="cat //member[name='name']/value/string/text()"
    local owner="$(echo "$cmd" | xmllint --shell "$tmpfile" | sed -n -e '/^[[:alnum:]]/p')"
    debug "Task has owner name:"
    debug "$owner"
    debug "---"
    echo "$owner"
}

ownerinfo2krb() {
    local xml="$1" && shift
    local tmpfile="$(mktemp)"
    echo "$xml" > "$tmpfile"
    local cmd="cat //member[name='krb_principal']/value/string/text()"
    local email="$(echo "$cmd" | xmllint --shell "$tmpfile" | sed -n -e '/^[[:alnum:]]/p')"
    debug "Task has owner has email:"
    debug "$email"
    debug "---"
    echo "$email"
}

mk_query_task_children() {
    # getTaskChildren query
    # Build can be: NVR or build number.
    local task="$1" && shift
    local query="$(cat << EOF
<?xml version='1.0'?>
<methodCall>
    <methodName>getTaskChildren</methodName>
    <params>
        <param>
            <value><int>$task</int></value>
        </param>
    </params>
</methodCall>
EOF
    )"
    debug "Brew query for getTaskChildren: ${query:0:200}...(truncated)"
    echo "$query"
}


mk_repo() {
    local task_id="$1" && shift
    local repo_dir="$1" && shift
    local repo_enabled="${1:0}" && shift
    repo_dir="${repo_dir##/}"
    repo_dir="${repo_dir%%/}"
    local repo="$(cat << EOF
[brew-${task_id}]
name=Repo for $task_id Brew build
baseurl=file:///${repo_dir}/
enabled=$repo_enabled
gpgcheck=0
EOF
    )"
    debug "Repo file text: ${repo:0:200}...(truncated)"
    echo "$repo"
}

mk_named_repo() {
    local repo_name="$1" && shift
    local repo_dir="$1" && shift
    local repo_enabled="${1:0}" && shift
    repo_dir="${repo_dir##/}"
    repo_dir="${repo_dir%%/}"
    local repo="$(cat << EOF
[${repo_name}]
name=Repo for $repo_name
baseurl=file:///${repo_dir}/
enabled=$repo_enabled
gpgcheck=0
module_hotfixes=1
EOF
    )"
    debug "Repo file text: ${repo:0:200}...(truncated)"
    echo "$repo"
}

msg_usage() {
    cat << EOF

Get RPM for Brew task.

Usage:
$PROG <options>

Options:
-a, --arch=ARCH         download for specified ARCH
-r, --recursive         download also from child tasks
-c, --createrepo        create a repo metadata at REPODIR
-t, --task=TASKID       Task ID
-i, --installrepofile   add to this system a .repo file for REPODIR
-d, --download=REPODIR  download RPM to REPODIR
-s, --srpm              print only SRPM information, URL, pkgname
    --onlyinrepo        do not download RPMs that are absent in official repos
    --repofilename      used as /etc/yum.repos.d/REPOFILENAME.repo
    --owner             print only owner information
-h, --help              display this help and exit
-v, --verbose           turn on debug
EOF
}

from_rpm_name() {
    # Input: 1:bar-9-123a.ia64.rpm or foo-1.0-1.i386
    # Mimic splitFilename() from https://github.com/rpm-software-management/yum/blob/master/rpmUtils/miscutils.py
    local filename="$1" && shift
    # One of: name, ver, rel, epoch, arch
    local req_info="$1" && shift
    # Drop .rpm
    filename="${filename%%.rpm}"
    # Arch
    local arch="${filename##*.}"
    debug "$filename arch: $arch"
    [[ $req_info == 'arch' ]] && echo "$arch" && return
    # Release
    local rel="${filename##*-}"
    rel="${rel%.*}"
    debug "$filename rel: $rel"
    [[ $req_info == 'rel' ]] && echo "$rel" && return
    # Version
    local ver="${filename%-${rel}.${arch}}"
    ver="${ver##*-}"
    debug "$filename ver: $ver"
    [[ $req_info == 'ver' ]] && echo "$ver" && return
    # Name
    local epoch_name="${filename%-${ver}-${rel}.${arch}}"
    name="${epoch_name##*:}"
    debug "$filename name: $name"
    [[ $req_info == 'name' ]] && echo "$name" && return
    # Epoch
    local epoch="${epoch_name%${name}}"
    epoch="${epoch//:/}"
    debug "$filename epoch: ${epoch:-none}"
    [[ $req_info == 'epoch' ]] && echo "$epoch" && return
}

filter_available() {
    local arch="$1" && shift
    local rpms="$1" && shift
    local rpms_filtered=
    local name=
    for rpm in $rpms; do
        rpm_file="$(basename "$rpm")"
        name="$(from_rpm_name "${rpm_file}" "name")"
        yum info "${name}.${arch}" >/dev/null 2>&1
        ret="$?"
        if [ "$ret" -ne 0 ]; then
            echo "Skipping as it is absent in shipped repos: $name" >&2
            continue
        fi
        rpms_filtered="${rpms_filtered:+$rpms_filtered }${rpm}"
    done
    echo "$rpms_filtered"
}

download_rpm() {
    local url="$1" && shift
    if [ -z "$DOWNLOAD" ]; then
        return
    fi
    mkdir -p "$REPODIR"
    REPODIR="$(realpath "$REPODIR")"
    pushd "$REPODIR" > /dev/null
    curl --retry 5 --insecure --fail --location --show-error --remote-name --remote-header-name "$url"
    popd > /dev/null
}

mk_url() {
    local filename="$1" && shift
    local srpm_filename="$1" && shift
    local is_scratch="$1" && shift

    if [ "$is_scratch" == "no" ]; then
        # http://download.eng.bos.redhat.com/brewroot/packages/ghostscript/9.25/2.el8_0.1/s390x/ghostscript-9.25-2.el8_0.1.s390x.rpm
        # http://download.eng.bos.redhat.com/brewroot/packages/ghostscript/9.25/2.el8_0.1/src/ghostscript-9.25-2.el8_0.1.src.rpm
        filename=$(basename "$filename")
        srpm_filename=$(basename "$srpm_filename")
        name="$(from_rpm_name "${srpm_filename}" "name")"
        rel="$(from_rpm_name "${srpm_filename}" "rel")"
        ver="$(from_rpm_name "${srpm_filename}" "ver")"
        arch="$(from_rpm_name "${filename}" "arch")"
        url="${BREWROOT}/packages/${srpm_pkg_name}/${ver}/${rel}/${arch}/$filename"
    else
        url="${BREWROOT}/work/${filename}"
    fi
    debug "URL for $filename: $url"
    echo "$url"
}

# Entry

PROG="${PROG:-${0##*/}}"
ARCH="${ARCH:-$(uname -m)}"
DEBUG="${DEBUG:-}"
TASK="${TASK:-}"
SRPM="${SRPM:-}"
OWNER="${OWNER:-}"
REPOFILENAME="${REPOFILENAME:-}"
REPODIR="${REPODIR:-repodir}"
BREWHUB="${BREWHUB:-https://brewhub.engineering.redhat.com/brewhub}"
DOWNLOAD="${DOWNLOAD:-}"
BREWROOT="${BREWROOT:-http://download.eng.bos.redhat.com/brewroot}"
LOGS_DIR="${LOGS_DIR:-mtps-logs}"
RECURSIVE="${RECURSIVE:-}"
CREATEREPO="${CREATEREPO:-}"
ONLYINREPO="${ONLYINREPO:-}"
CREATEREPO_BIN="${CREATEREPO_BIN:-}"
INSTALLREPOFILE="${INSTALLREPOFILE:-}"

# http://wiki.bash-hackers.org/howto/getopts_tutorial
opt_str="$@"
opt=$(getopt -n "$0" --options "hvrd:t:a:cis" --longoptions "help,verbose,repofilename:,download:,task:,arch:,createrepo,installrepofile,onlyinrepo,owner,recursive,srpm" -- "$@")
eval set -- "$opt"
while [[ $# -gt 0 ]]; do
    case "$1" in
        -t|--task)
            TASK="$2"
            shift 2
            ;;
        -a|--arch)
            ARCH="$2"
            shift 2
            ;;
        -d|--download)
            DOWNLOAD="yes"
            REPODIR="$2"
            shift 2
            ;;
        -c|--createrepo)
            CREATEREPO="yes"
            shift
            ;;
        -s|--srpm)
            SRPM="yes"
            shift
            ;;
        --owner)
            OWNER="yes"
            shift
            ;;
        -r|--recursive)
            RECURSIVE="yes"
            shift
            ;;
        --onlyinrepo)
            ONLYINREPO="yes"
            shift
            ;;
        -i|--installrepofile)
            INSTALLREPOFILE="yes"
            shift
            ;;
        --repofilename)
            REPOFILENAME="$2"
            shift 2
            ;;
        -v|--verbose)
            DEBUG="yes"
            shift
            ;;
        -h|--help)
            msg_usage
            exit 0
            ;;
        --)
            shift
            ;;
        *)
            msg_usage
            exit 1
    esac
done

# Test correct invocation
if [ -z "$TASK" ]; then
  echo "Use: $PROG -h for help."
  exit
fi

mkdir -p "$LOGS_DIR"
LOGS_DIR="$(realpath "$LOGS_DIR")"
while true; do
    TESTRUN_ID="$(date +%H%M%S)"
    logfname="${LOGS_DIR%%/}/$TESTRUN_ID-$TASK-mtps-get-task.log"
    logfname_pass="$(dirname "$logfname")/PASS-$(basename "$logfname")"
    logfname_fail="$(dirname "$logfname")/FAIL-$(basename "$logfname")"
    if [ -e "$logfname" -o -e "$logfname_pass" -o -e "$logfname_fail" ]; then
        sleep 1
        continue
    fi
    break
done
exec &> >(tee -a "$logfname")
exec 2>&1

do_clean_exit() {
    rc=$?
    trap - SIGINT SIGTERM SIGABRT EXIT # clear the trap
    new_logfname="$logfname_fail"
    if [ "$rc" = "0" ]; then
        new_logfname="$logfname_pass"
    fi
    # Close tee pipes
    for pid in $(ps -o pid --no-headers --ppid $$); do
        if [ -n "$(ps -p $pid -o pid=)" ]; then
            kill -s HUP $pid
        fi
    done
    mv -f "$logfname" "$new_logfname"
    exit $rc
}

trap do_clean_exit SIGINT SIGTERM SIGABRT EXIT

debug "Task: $TASK"
debug "Arch: $ARCH"
debug "Srpm: $SRPM"
debug "Owner: $OWNER"
debug "Store RPMS at: $DOWNLOAD"
debug "Create repo: ${CREATEREPO:-no}"
debug "Download recursive from children tasks: ${RECURSIVE:-no}"


TASKS="$TASK"

query_task_info="$(mk_query_task_info $TASK)"
# requested created task
answer_task_info="$(send_query "$query_task_info")"
task_owner_id="$(taskinfo2owner "$answer_task_info")"

query_task_request="$(mk_query_task_request $TASK)"
answer_task_request="$(send_query "$query_task_request")"
is_scratch="$(is_scratch_from_answer "$answer_task_request")"
task_build_target="$(taskquery2target "$answer_task_request")"

query_owner_info="$(mk_query_get_user $task_owner_id)"
answer_owner_info="$(send_query "$query_owner_info")"
OWNERUSER="$(ownerinfo2user "$answer_owner_info")"
OWNERKRB="$(ownerinfo2krb "$answer_owner_info")"

echo "Owner user: $OWNERUSER"
echo "Owner krb: $OWNERKRB"
echo "Task target: $task_build_target"
echo "Is scratch build: $is_scratch"

if [ -n "$OWNER" ]; then
    # Print only owner information
    exit 0
fi

# Works only for parent task
query_listbuilds="$(mk_query_listbuilds "$TASK")"
answer_listbuilds="$(send_query "$query_listbuilds")"
nvr="$(nvr_from_answer "$answer_listbuilds")"
buildid="$(buildid_from_answer "$answer_listbuilds")"
query_listbuildtags="$(mk_query_listbuildtags "$buildid")"
answer_listbuildtags="$(send_query "$query_listbuildtags")"
buildtags="$(buildtags_from_answer "$answer_listbuildtags")"
buildtags="$(echo "$buildtags" | tr '\n' ' ')"
buildtags="${buildtags%% }"

if [ -n "$RECURSIVE" ]; then
    query_task_children="$(mk_query_task_children $TASK)"
    answer_task_children="$(send_query "$query_task_children")"
    task_children="$(children_from_answer "$answer_task_children")"
    TASKS="$TASKS $task_children"
    TASKS="${TASKS%% }"
fi

srpm_url=
volume_name=
build_source=
srpm_pkg_file=
srpm_pkg_name=
rpms_from_task_all=""
rpms_from_task_noarch_all=""
for task in $TASKS; do
    debug "Process task: $task"
    query_task_files="$(mk_query_task_result $task)" # Holds plain XML
    answer_task_result="$(send_query "$query_task_files")"
    rpms_from_task="$(rpms_from_answer "$ARCH" "$answer_task_result")"
    rpms_from_task_noarch="$(rpms_from_answer "noarch" "$answer_task_result")"
    srpm="$(srpms_from_answer "$answer_task_result")"
    if [ -n "$srpm" ]; then
        srpm_pkg_file="$(basename $srpm)"
        srpm_pkg_name="$(from_rpm_name "${srpm_pkg_file}" "name")"
        if [ -z "$nvr" ]; then
            nvr="${srpm_pkg_file%%.src.rpm}"
        fi
        query_build="$(mk_query_build "$nvr")"
        answer_build="$(send_query "$query_build")"
        volume_name="$(volume_name_from_answer "$answer_build")"
        build_source="$(build_source_from_answer "$answer_build")"
        srpm_url="$(mk_url "$srpm" "$srpm_pkg_file" "$is_scratch")"
    fi
    if [ -n "$ONLYINREPO" ]; then
        # Purpose:
        #
        #   * Brew builds always have 1 input SRPM.
        #   * Brew builds can have many PRM.
        #
        # RCM team can choose only some RPM. And make AppStream / BaseOS / Compose
        # only from some RPMs, ignoring other RPMs from Brew build. This options
        # says to ignore RPMs that are absent.
        rpms_from_task="$(filter_available "$ARCH" "$rpms_from_task")"
        rpms_from_task_noarch="$(filter_available "noarch" "$rpms_from_task_noarch")"
    fi
    rpms_from_task_all+=" $rpms_from_task"
    rpms_from_task_noarch_all+=" $rpms_from_task_noarch"
done

echo "NVR: $nvr"
echo "BUILD ID: $buildid"
echo "BUILD TAGS: $buildtags"
echo "SRPM PKG NAME: $srpm_pkg_name"
echo "SRPM PKG FILE: $srpm_pkg_file"
echo "SRPM URL: $srpm_url"
echo "BUILD SOURCE: $build_source"

if [ -n "$SRPM" ]; then
    # Print only SRPM information
    exit 0
fi

rpms_from_task_all="${rpms_from_task_all%%+( )}"
rpms_from_task_noarch_all="${rpms_from_task_noarch_all%%+( )}"
if [ -z "${rpms_from_task_all}${rpms_from_task_noarch_all}" ]; then
    echo "Brew repo doesn't have rpms for $ARCH and noarch"
    echo "Exit with special exit code: $RET_NO_PKG"
    exit "$RET_NO_PKG"
fi

urls=()
for pkg in $rpms_from_task_all $rpms_from_task_noarch_all; do
    url="$(mk_url "$pkg" "$srpm_pkg_file" "$is_scratch")"
    urls+=("$url")
done

if [ ${#urls[@]} -eq 0 ]; then
    echo "This build doesn't have packages for testing."
    echo "Brew repo has next rpms for $ARCH and noarch: $rpms_from_task_all $rpms_from_task_noarch_all"
    echo "No one of the above packages is present in current repos."
    exit 1
fi

# Download RPMs
for url in ${urls[@]}; do
    echo "$url"
    download_rpm "$url"
done

if [ -z "$CREATEREPO" -o ! -d "$REPODIR" ]; then
    exit 0
fi

which 'createrepo' >/dev/null 2>&1 && CREATEREPO_BIN="createrepo" || :
which 'createrepo_c' >/dev/null 2>&1 && CREATEREPO_BIN="createrepo_c" || :
if [ -z "$CREATEREPO_BIN" ]; then
    echo "Install createrepo[_c] to create repositories."
    exit 0
fi
echo "Using $CREATEREPO_BIN"
"$CREATEREPO_BIN" --database "$REPODIR"

if [ -n "$REPOFILENAME" ]; then
    repo_file_text="$(mk_named_repo "$REPOFILENAME" "$REPODIR" "1")"
else
    repo_file_text="$(mk_repo "$TASK" "$REPODIR" "1")"
fi
echo "Repo file:"
echo "$repo_file_text"
id="$(id -u)"

if [ -n "$INSTALLREPOFILE" -a "$id" = "0" ]; then
    if [ -n "$REPOFILENAME" ]; then
        repofile="/etc/yum.repos.d/$REPOFILENAME.repo"
    else
        repofile="/etc/yum.repos.d/brew-${TASK}.repo"
    fi
    echo "Create repo file: $repofile"
    echo "$repo_file_text" > "$repofile"
fi
